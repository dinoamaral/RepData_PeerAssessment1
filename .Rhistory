library(corrplot)
library(fpc)
library(cluster)
library(e1071)
library(kernlab)
vip_dino <- read.csv(file = "/Users/dino/Dropbox/DataScience/vip_dino_merge.csv", sep = ",", header = TRUE)
colnames(vip_dino) <-gsub("snp_vip.", "", names(vip_dino))
vip_dino <- vip_dino[, -c(1:5,7,9,10,11)]
vip_dino$hr_tran_bra_hora <- substr(vip_dino$hr_tran_bra, 1,2)
vip_dino$dt_tran_bra_dia <- substr(vip_dino$dt_tran_bra, 9,10)
vip_dino$nm_cid <- as.integer(vip_dino$nm_cid)
vip_dino$in_hblt_uso_extr <- as.integer(vip_dino$in_hblt_uso_extr)
vip_dino$cd_tip_tran <- as.integer(vip_dino$cd_tip_tran)
vip_dino$tx_dcr_sub_rmat <- as.integer(vip_dino$tx_dcr_sub_rmat)
vip_dino$tx_dcr_rmat <- as.integer(vip_dino$tx_dcr_rmat)
vip_dino$hr_tran_bra_hora <- as.integer(vip_dino$hr_tran_bra_hora)
vip_dino$dt_tran_bra_dia <- as.integer(vip_dino$dt_tran_bra_dia)
vip_dino$hr_tran_bra <- as.integer(vip_dino$hr_tran_bra)
vip_dino$dt_tran_bra <- as.integer(vip_dino$dt_tran_bra)
vip_dino$nm_cia <- as.integer(vip_dino$nm_cia)
vip_dino$tx_trml <- as.integer(vip_dino$tx_trml)
vip_dino$nr_cep <- as.integer(vip_dino$nr_cep)
vip_dino <- vip_dino[, -c(3,4,7)]
vip_dino <- vip_dino[, -c(12,13,15,18)]
vip_dino <- na.omit(vip_dino)
vip_dino_sc <- scale(vip_dino)
vip_dino_cor <- cor(vip_dino_sc, method = "spearman")
corrplot(vip_dino_cor, order = "hclust", method="circle", addrect = 5)
vip_skew <- apply(vip_dino_sc, 2, skewness)
plot(vip_skew, type="o")
vip_dino_sc <- vip_dino_sc[, -c(20)]
vip_km <- kmeans(vip_dino_sc, centers = 3, nstart = 25)
vip_dino_sc <- data.frame(vip_dino_sc, vip_km$cluster)
clusplot(vip_dino_sc, vip_km$cluster)
clusplot(vip_dino_sc, vip_km$cluster, color = TRUE, shade = TRUE, labels=2, lines=0)
plotcluster(vip_dino_sc,vip_km$cluster)
vip_pca <- prcomp(vip_dino_sc, center = TRUE, cor = TRUE, nfactors=2)
plot(vip_pca)
plot(vip_pca)
summary(vip_pca)
plot(vip_pca)
summary(vip_pca)
names(vip_pca)
vip_pca$x
biplot(vip_pca, arrow.len = 0.1, color=TRUE)
biplot(vip_pca, arrow.len = 0.08, xlim=c(-0.3,0), ylim=c(-0.1,0.05), expand = 2)
biplot(vip_pca, arrow.len = 0.08, xlim=c(-0.08,0.05), ylim=c(0,0.15), expand = 2)
biplot(vip_pca, arrow.len = 0.08, xlim=c(0,0.15), ylim=c(-0.1,0.05), expand = 2)
vip_josias <- read.csv(file = "/Users/dino/Dropbox/DataScience/vip_josias_merge.csv", sep = ",",
header = TRUE)
colnames(vip_josias) <-gsub("snp_vip.", "", names(vip_josias))
vip_josias <- vip_josias[, -c(1:5,7,9,10,11)]
vip_josias$hr_tran_bra_hora <- substr(vip_josias$hr_tran_bra, 1,2)
vip_josias$dt_tran_bra_dia <- substr(vip_josias$dt_tran_bra, 9,10)
vip_josias$nm_cid <- as.integer(vip_josias$nm_cid)
vip_josias$in_hblt_uso_extr <- as.integer(vip_josias$in_hblt_uso_extr)
vip_josias$cd_tip_tran <- as.integer(vip_josias$cd_tip_tran)
vip_josias$tx_dcr_sub_rmat <- as.integer(vip_josias$tx_dcr_sub_rmat)
vip_josias$tx_dcr_rmat <- as.integer(vip_josias$tx_dcr_rmat)
vip_josias$hr_tran_bra_hora <- as.integer(vip_josias$hr_tran_bra_hora)
vip_josias$dt_tran_bra_dia <- as.integer(vip_josias$dt_tran_bra_dia)
vip_josias$hr_tran_bra <- as.integer(vip_josias$hr_tran_bra)
vip_josias$dt_tran_bra <- as.integer(vip_josias$dt_tran_bra)
vip_josias$nm_cia <- as.integer(vip_josias$nm_cia)
vip_josias$tx_trml <- as.integer(vip_josias$tx_trml)
vip_josias$nr_cep <- as.integer(vip_josias$nr_cep)
vip_josias <- vip_josias[, -c(3,4,7)]
vip_josias <- vip_josias[, -c(12,13,15,18)]
vip_josias <- na.omit(vip_josias)
vip_josias_sc <- scale(vip_josias)
vip_flag <- c(rep(1,196), rep(-1,382))
vip_total <- rbind(vip_dino, vip_josias)
total_full_sc <- scale(vip_total)
total_full_pca <- prcomp(total_full_sc, center = TRUE, cor = TRUE, scale = TRUE)
names(total_full_pca)
biplot(total_full_pca, arrow.len = 0.08, xlim=c(-0.3,0.2), ylim=c(-0.1,0.2), expand = 2)
vip_skew
names(vip_skew)
vip_skew
ksvp <- ksvm(x = total_full_pca$x[,1:2], y = vip_flag, type = "C-svc", kernel = "rbfdot", sigma=list(seq(0, 10, 1)), C=4)
ksvp <- ksvm(x = total_full_pca$x[,1:2], y = vip_flag, type = "C-svc", kernel = "rbfdot", sigma=0.1, C=4)
plot(ksvp)
ksvp <- ksvm(x = total_full_pca$x[,1:2], y = vip_flag, type = "C-svc",
kernel = "rbfdot", sigma=0.1, C=4)
predict(ksvm, vip_total[c(20,30,150)], type="decision")
ksvp <- ksvm(x = total_full_pca$x[,1:2], y = vip_flag, type = "C-bsvc", kpar = list(sigma = 0.1),
kernel = "rbfdot", sigma=0.1, C = 10, prob.model = TRUE)
predict(ksvm, vip_total[c(20,30,150)], type="decision")
predict(ksvm, total_full_pca$x[,1:2][c(20,30,150)], type="decision")
ksvp <- ksvm(x = total_full_pca$x[,2:3], y = vip_flag, type = "C-bsvc", kpar = list(sigma = 0.1),
kernel = "rbfdot", sigma=0.1, C = 10, prob.model = TRUE)
plot(ksvp)
ksvp <- ksvm(x = total_full_pca$x[,2:3], y = vip_flag, type = "C-bsvc", kpar = list(sigma = 0.1),
kernel = "rbfdot", sigma=0.1, C = 10, prob.model = TRUE)
plot(ksvp)
ksvp <- ksvm(x = total_full_pca$x[,2:3], y = vip_flag, type = "C-svc", kpar = list(sigma = 0.1),
kernel = "rbfdot", sigma=0.1, C = 10, prob.model = TRUE)
plot(ksvp)
library("nFactors", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(nFactors)
ev <- eigen(cor(total_full_sc)) # get eigenvalues
ap <- parallel(subject=nrow(total_full_sc),var=ncol(total_full_sc),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
ev
names(ev)
ev$values
plot(ksvp)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
abline(lm(Ozone ~ Wind))
unzip("activity.zip")
activity <- read.csv("activity.csv")
str(activity)
activity$date <- as.Date(activity$date)
setwd("~/GitHub/RepData_PeerAssessment1")
unzip("activity.zip")
activity <- read.csv("activity.csv")
str(activity)
activity$date <- as.Date(activity$date)
aggregacti <- aggregate(steps ~ date, data = activity, FUN = sum)
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total numbers of steps taken per day")
mean(aggregacti$steps)
median(aggregacti$steps)
aggreg_steps_interval <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(aggreg_steps_interval, type="l", col = "darkblue")
aggreg_steps_interval$interval[which.max(aggreg_steps_interval$steps)]
for (i in 1:nrow(activity))
{    if (is.na(activity$steps[i]) == TRUE)
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
aggreg2 <- aggregate(steps2 ~ date, data = activity, FUN = sum)
barplot(aggreg2$steps, names.arg = aggreg2$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total numbers of steps(with missing data filled in) taken per day")
mean(aggreg2$steps2)
median(aggreg2$steps2)
for (i in 1:nrow(activity))
{    if (weekdays(activity$date)[i] == "Saturday")
{activity$daytype[i] <- "weekend"}
else if (weekdays(as.Date(activity$date))[i] == "Sunday")
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
weekdays(activity$date)[34]
View(activity)
weekdays(activity$date)[1]
weekdays(activity$date)[4567]
unzip("activity.zip")
activity <- read.csv("activity.csv")
str(activity)
weekdays(activity$date)[34]
weekdays(as.Date(activity$date))[34]
as.Date
?as.Date
?Sys.setlocale
Sys.getlocale()
Sys.setlocale("LC_ALL","English")
Sys.getlocale()
Sys.setlocale("LC_MESSAGES", 'en_GB.UTF-8')
Sys.setenv(LANG = "en_US.UTF-8")
Sys.getlocale()
weekdays(activity$date)[34]
weekdays(as.Date(activity$date))[34]
Sys.setlocale("LC_MESSAGES", 'en_US.UTF-8')
Sys.getlocale()
Sys.getlocale()
weekdays(as.Date(activity$date))[34]
Sys.setlocale("LC_TIME", "C")
weekdays(as.Date(activity$date))[34]
aggregacti <- aggregate(steps ~ date, data = activity, FUN = sum)
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total numbers of steps taken per day")
mean(aggregacti$steps)
median(aggregacti$steps)
aggreg_steps_interval <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(aggreg_steps_interval, type="l", col = "darkblue")
aggreg_steps_interval$interval[which.max(aggreg_steps_interval$steps)]
sum(is.na(activity))
for (i in 1:nrow(activity))
{    if (is.na(activity$steps[i]) == TRUE)
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
aggreg2 <- aggregate(steps2 ~ date, data = activity, FUN = sum)
barplot(aggreg2$steps, names.arg = aggreg2$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total numbers of steps(with missing data filled in) taken per day")
mean(aggreg2$steps2)
median(aggreg2$steps2)
for (i in 1:nrow(activity))
{    if (weekdays(activity$date)[i] == "Saturday")
{activity$daytype[i] <- "weekend"}
else if (weekdays(activity$date)[i] == "Sunday")
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] == "Saturday")
{activity$daytype[i] <- "weekend"}
else if (weekdays(as.Date(activity$date))[i] == "Sunday")
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
View(activity)
which(activity$daytype) == weekend
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday")
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday")
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
View(activity)
stepsByDay <- aggregate(steps ~ interval + daytype, data = activity, mean)
names(stepsByDay) <- c("interval", "daytype", "steps")
xyplot(steps ~ interval | daytype, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
library(ggplot)
library(ggplot2)
xyplot(steps ~ interval | daytype, stepsByDay, type = "l", layout = c(1, 2),
xlab = "Interval", ylab = "Number of steps")
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps ~ interval, data = activity, subset = activity$daytype ==
type, FUN = mean)
plot(steps.type, type = "l", main = type)
}
for (i in 1:nrow(activity))
{    print "i"
if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
for (i in 1:nrow(activity))
{    print i
if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"} {print i}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {print i}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {print [i]}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weeday"}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{as.factor(activity$daytype[i]) <- "weekend"}
else {as.factor(activity$daytype[i]) <- "weekday"}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
View(activity)
sum(activity$daytype == weekday)
sum(activity$daytype == "weekday")
sum(activity$daytype == "weekend")
while (i < nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
i <- i + 1
}
while (i < nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
i <- i + 1
print i
}
activity <- activity[, -daytype]
activity <- activity[, -c(5)]
while (i < nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
i <- i + 1
}
i = 1
while (i < nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
i <- i + 1
}
sum(activity$daytype == "weekend")
sum(activity$daytype == "weekday")
weekdays(as.Date(activity$date))[56]
weekdays(as.Date(activity$date))[1756]
weekdays(as.Date(activity$date))[17522]
weekdays(as.Date(activity$date))[14522]
weekdays(as.Date(activity$date))[16522]
weekdays(as.Date(activity$date))[12322]
i = 1;
while (i < nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
i <- i + 1
}
weekdays(as.Date(activity$date))[17522]
sum(activity$daytype == "weekend")
sum(activity$daytype == "weekday")
activity$date <- as.Date(activity$date)
for (i in 1:nrow(activity))
{    if (weekdays(activity$date)[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
activity$daytype <- as.factor(activity$daytype)
par(mfrow = c(2, 1))
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps2 ~ interval, data = activity, subset = activity$daytype ==
type, FUN = mean)
plot(steps.type, type = "l", main = type)
}
par(mfrow = c(2, 1))
for (daytype in c("weekend", "weekday")) {
steps.daytype <- aggregate(steps2 ~ interval, data = activity, subset = activity$daytype ==
daytype, FUN = mean)
plot(steps.daytype, type = "l", main = daytype)
}
par(mfrow = c(2, 1))
for (daytype in c("weekend", "weekday")) {
steps.daytype <- aggregate(steps2 ~ interval, data = activity, subset = activity$daytype ==
daytype, FUN = mean)
plot(steps.daytype, type = "l", main = daytype)
}
a <- c("sg_sis_ogm","cd_cli","cd_ag","nr_ct","nr_plst","nm_cli","vl_tran_moe_nac","vl_tran_moe_ogm",
"dt_tran_gmt","hr_tran_gmt","dt_tran_bra","hr_tran_bra","cd_fma_entd","cd_moe","cd_pais",
"cd_ramo_atvd","cd_tran","nm_cia","cd_cia","tx_trml","cd_rpst","nr_ct_crt","cd_tip_rst_plst",
"cd_tip_rst_ct_crt","nm_cid","nr_cep","in_hblt_uso_extr","cd_tip_tran")
vip_fr_jul <- read.csv(file = "/Users/dino/Documents/DataSet/base/frd7_4", sep = "\u0001", header = F)
vip_tran_jul <- read.csv(file = "/Users/dino/Documents/DataSet/base/clr7_10", sep = "\u0001", header = F)
colnames(vip_fr_jul) <- a
colnames(vip_tran_jul) <- a
vip_fr_jul$flag<- rep("FRAUDE", length=nrow(vip_fr_jul))
vip_tran_jul$flag <- rep("NÃO FRAUDE",length=nrow(vip_tran_jul))
vip_tot <- rbind(vip_fr_jul, vip_tran_jul)
vip_tot <- na.omit(vip_tot)
vip_tot$sg_sis_ogm <- as.integer(vip_tot$sg_sis_ogm)
vip_tot$nm_cli <- as.integer(vip_tot$nm_cli)
vip_tot$dt_tran_gmt <- as.integer(vip_tot$dt_tran_gmt)
vip_tot$hr_tran_gmt <- as.integer(vip_tot$hr_tran_gmt)
vip_tot$dt_tran_bra <- as.integer(vip_tot$dt_tran_bra)
vip_tot$hr_tran_bra <- as.integer(vip_tot$hr_tran_bra)
vip_tot$cd_pais <- as.numeric(vip_tot$cd_pais)
vip_tot$nm_cia <- as.integer(vip_tot$nm_cia)
vip_tot$cd_cia <- as.integer(vip_tot$cd_cia)
vip_tot$tx_trml <- as.integer(vip_tot$tx_trml)
vip_tot$cd_rpst <- as.integer(vip_tot$cd_rpst)
vip_tot$nm_cid <- as.integer(vip_tot$nm_cid)
vip_tot$nr_cep <- as.integer(vip_tot$nr_cep)
vip_tot$in_hblt_uso_extr <- as.integer(vip_tot$in_hblt_uso_extr)
vip_tot$cd_tip_tran <- as.integer(vip_tot$cd_tip_tran)
vip_tot$flag <- as.factor(vip_tot$flag)
samp <- floor(0.75 * nrow(vip_tot))
# set the seed to make your partition reproductible
set.seed(123)
samp_vip_fr_jul <- sample(seq_len(nrow(vip_tot)), size = samp)
train_vip_jul <- vip_tot[samp_vip_fr_jul, ]
test_vip_jul <- vip_tot[-samp_vip_fr_jul, ]
library(plyr)
library(randomForest)
rfmodel <- randomForest( flag ~ ., data = train_vip_jul, na.action = na.omit,
ntree = 80, mtry = 6, proximity = TRUE, importance = TRUE)
rftestPred <- predict(rfmodel, test_vip_jul, type = "prob")
print(rfmodel)
plot(rfmodel)
importance(rfmodel)
print(rftestPred)
varImpPlot(rfmodel, scale = FALSE)
ntree = 100, mtry = 5, proximity = TRUE, importance = TRUE)
rfmodel2 <- randomForest( flag ~ ., data = train_vip_jul, na.action = na.omit,
ntree = 100, mtry = 5, proximity = TRUE, importance = TRUE)
rftestPred2 <- predict(rfmodel2, test_vip_jul, type = "prob")
print(rfmodel2)
print(rfmodel)
print(rfmodel2)
plot(rfmodel2)
plot(rfmodel)
plot(rfmodel2)
plot(rfmodel2)
plot(rfmodel)
?randomforest
?randomForest
rfmodel <- randomForest( flag ~ ., data = train_vip_jul, na.action = na.omit,
ntree = 80, mtry = 5, proximity = TRUE, importance = TRUE)
?randomForest
vip_tot_ago <- read.csv(file = "/Users/dino/Documents/DataSet/base/vip_samp_ago", sep = "\u0001", header = F)
colnames(vip_tot_ago) <- a
rftestPred2 <- predict(rfmodel2, vip_tot_ago, type = "prob")
vip_tot_ago$sg_sis_ogm <- as.integer(vip_tot_ago$sg_sis_ogm)
vip_tot_ago$nm_cli <- as.integer(vip_tot_ago$nm_cli)
vip_tot_ago$dt_tran_gmt <- as.integer(vip_tot_ago$dt_tran_gmt)
vip_tot_ago$hr_tran_gmt <- as.integer(vip_tot_ago$hr_tran_gmt)
vip_tot_ago$dt_tran_bra <- as.integer(vip_tot_ago$dt_tran_bra)
vip_tot_ago$hr_tran_bra <- as.integer(vip_tot_ago$hr_tran_bra)
vip_tot_ago$cd_pais <- as.numeric(vip_tot_ago$cd_pais)
vip_tot_ago$nm_cia <- as.integer(vip_tot_ago$nm_cia)
vip_tot_ago$cd_cia <- as.integer(vip_tot_ago$cd_cia)
vip_tot_ago$tx_trml <- as.integer(vip_tot_ago$tx_trml)
vip_tot_ago$cd_rpst <- as.integer(vip_tot_ago$cd_rpst)
vip_tot_ago$nm_cid <- as.integer(vip_tot_ago$nm_cid)
vip_tot_ago$nr_cep <- as.integer(vip_tot_ago$nr_cep)
vip_tot_ago$in_hblt_uso_extr <- as.integer(vip_tot_ago$in_hblt_uso_extr)
vip_tot_ago$cd_tip_tran <- as.integer(vip_tot_ago$cd_tip_tran)
rftestPred2 <- predict(rfmodel2, vip_tot_ago, type = "prob")
print(rfmodel)
print(rftestPred2)
table(predict(rfmodel2, vip_tot_ago, type = "prob"))
rftestPred2[,2:10]
rftestPred2[2:10,]
for i in 1:length(rftestPred2) if{rftestPred2[1,x] > 0.80 print "Fraude"}
for i in 1:length(rftestPred2) if {rftestPred2[1,x] > 0.80} print "Fraude"
for i in 1:length(rftestPred2) if {rftestPred2[1,x] > 0.80} print "Fraude"
rftestPred2$confusion
rfmodel2$confusion
print rftestPred2
print(rftestPred2)
rfmodel2$confusion
print(rftestPred2)$[,2]
rftestPred2[,2]
rftestPred2[rftestPred2[,2] > 0.80]
rftestPred2[rftestPred2[,1] > 0.80]
rftestPred2[rftestPred2[,2] > 0.80]
rftestPred2[c([,2]) > 0.80]
rftestPred2[c(,2) > 0.80]
rftestPred2[c(,1) > 0.80]
rftestPred2[c(1,1:5) > 0.80]
rftestPred2[c(1,2)]
rftestPred2[c(1,2:6)]
colnames(rftestPred2)
rftestPred2[c(1,2:6)]
rftestPred2[c(2,2:6)]
rftestPred2[c(2,1)]
rftestPred2[which (rftestPred2$FRAUDE > 0.85), ]
rftestPred2[which (rftestPred2$FRAUDE > '0.85'), ]
rftestPred2$FRAUDE
head(rftestPred2)
rftestPred2$1
varImpPlot(rfmodel2, scale = FALSE)
print(rftestPred2)
rftestPred2[rftestPred2$FRAUDE > '0.85',]
head(rftestPred2)
rftestPred2[1,]
rftestPred2[2,]
rftestPred2[12000,]
rftestPred2[5000,]
rftestPred2[14000,]
rftestPred2[2340,]
rftestPred2[8,]
rftestPred2[1234,]
rftestPred2[123,]
rftestPred2[,1]
rftestPred2[,1] > 0.85
nrow(rftestPred2[,1] > 0.85)
ncol(rftestPred2[,1] > 0.85)
count(rftestPred2[,1] > 0.85)
count(rftestPred2[,1] > 0.90)
count(rftestPred2[,1] > 0.95)
count(rftestPred2[,2] > 0.95)
rftestPred2[, 2]
count(rftestPred2[,2] > 1.00)
count(rftestPred2[,2] > 0.86)
count(rftestPred2[,2] > 0.90)
count(rftestPred2[,2] > 0.95)
count(rftestPred2[,2] > 0.98)
count(rftestPred2[,2] > 0.99)
rfmodel2$confusion
rftestPred2$income
rftestPred2$val$income
adult.rf.pr = predict(rfmodel,type="prob",newdata=vip_tot_ago)[,2]
adult.rf.pred = prediction(adult.rf.pr, data$val$income)
varImpPlot(rfmodel2)
library("bitops", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("RCurl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
