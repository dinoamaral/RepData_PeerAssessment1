vip_josias$nm_cid <- as.integer(vip_josias$nm_cid)
vip_josias$in_hblt_uso_extr <- as.integer(vip_josias$in_hblt_uso_extr)
vip_josias$cd_tip_tran <- as.integer(vip_josias$cd_tip_tran)
vip_josias$tx_dcr_sub_rmat <- as.integer(vip_josias$tx_dcr_sub_rmat)
vip_josias$tx_dcr_rmat <- as.integer(vip_josias$tx_dcr_rmat)
vip_josias$hr_tran_bra_hora <- as.integer(vip_josias$hr_tran_bra_hora)
vip_josias$dt_tran_bra_dia <- as.integer(vip_josias$dt_tran_bra_dia)
vip_josias$hr_tran_bra <- as.integer(vip_josias$hr_tran_bra)
vip_josias$dt_tran_bra <- as.integer(vip_josias$dt_tran_bra)
vip_josias$nm_cia <- as.integer(vip_josias$nm_cia)
vip_josias$tx_trml <- as.integer(vip_josias$tx_trml)
vip_josias$nr_cep <- as.integer(vip_josias$nr_cep)
vip_josias <- vip_josias[, -c(3,4,7)]
vip_josias <- vip_josias[, -c(12,13,15,18)]
vip_josias <- na.omit(vip_josias)
vip_josias_sc <- scale(vip_josias)
vip_flag <- c(rep(1,196), rep(-1,382))
vip_total <- rbind(vip_dino, vip_josias)
total_full_sc <- scale(vip_total)
total_full_pca <- prcomp(total_full_sc, center = TRUE, cor = TRUE, scale = TRUE)
names(total_full_pca)
biplot(total_full_pca, arrow.len = 0.08, xlim=c(-0.3,0.2), ylim=c(-0.1,0.2), expand = 2)
vip_skew
names(vip_skew)
vip_skew
ksvp <- ksvm(x = total_full_pca$x[,1:2], y = vip_flag, type = "C-svc", kernel = "rbfdot", sigma=list(seq(0, 10, 1)), C=4)
ksvp <- ksvm(x = total_full_pca$x[,1:2], y = vip_flag, type = "C-svc", kernel = "rbfdot", sigma=0.1, C=4)
plot(ksvp)
ksvp <- ksvm(x = total_full_pca$x[,1:2], y = vip_flag, type = "C-svc",
kernel = "rbfdot", sigma=0.1, C=4)
predict(ksvm, vip_total[c(20,30,150)], type="decision")
ksvp <- ksvm(x = total_full_pca$x[,1:2], y = vip_flag, type = "C-bsvc", kpar = list(sigma = 0.1),
kernel = "rbfdot", sigma=0.1, C = 10, prob.model = TRUE)
predict(ksvm, vip_total[c(20,30,150)], type="decision")
predict(ksvm, total_full_pca$x[,1:2][c(20,30,150)], type="decision")
ksvp <- ksvm(x = total_full_pca$x[,2:3], y = vip_flag, type = "C-bsvc", kpar = list(sigma = 0.1),
kernel = "rbfdot", sigma=0.1, C = 10, prob.model = TRUE)
plot(ksvp)
ksvp <- ksvm(x = total_full_pca$x[,2:3], y = vip_flag, type = "C-bsvc", kpar = list(sigma = 0.1),
kernel = "rbfdot", sigma=0.1, C = 10, prob.model = TRUE)
plot(ksvp)
ksvp <- ksvm(x = total_full_pca$x[,2:3], y = vip_flag, type = "C-svc", kpar = list(sigma = 0.1),
kernel = "rbfdot", sigma=0.1, C = 10, prob.model = TRUE)
plot(ksvp)
library("nFactors", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(nFactors)
ev <- eigen(cor(total_full_sc)) # get eigenvalues
ap <- parallel(subject=nrow(total_full_sc),var=ncol(total_full_sc),
rep=100,cent=.05)
nS <- nScree(x=ev$values, aparallel=ap$eigen$qevpea)
plotnScree(nS)
ev
names(ev)
ev$values
plot(ksvp)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
abline(lm(Ozone ~ Wind))
setwd("~/GitHub/RepData_PeerAssessment1")
unzip(activity.zip)
unzip(/Users/dino/GitHub/RepData_PeerAssessment1/activity.zip)
unzip("activity.zip")
unzip("activity.zip")
actitivity <- read.csv(activity.csv)
actitivity <- read.csv("activity.csv")
rm(actititvity)
rm(actitivity)
activity <- read.csv("activity.csv")
View(activity)
str(activity)
activity$date <- as.Date(activity$date)
str(activity)
aggreg_data <- aggregate(steps ~ date, data = activity, FUN = sum)
barplot(aggreg_data$steps, names.arg = aggreg_data$date, xlab = "date", ylab = "steps")
aggreg_data <- aggregate(steps ~ date, data = activity, FUN = mean)
barplot(aggreg_data$steps, names.arg = aggreg_data$date, xlab = "date", ylab = "steps")
aggregacti <- aggregate(steps ~ date, data = activity, FUN = mean)
barplot(aggregacti$steps, names.arg = aggregacti$date, xlab = "Date",
ylab = "Number of Steps", fill = "blue")
?barplot
hist(aggregacti$steps, names.arg = aggregacti$date, xlab = "Date",
ylab = "Number of Steps", fill = "blue")
hist(aggregacti$steps, names.arg = aggregacti$date, xlab = "Date",
ylab = "Number of Steps")
?hist
hist(aggregacti$steps, names.arg = aggregacti$date, breaks = 10, xlab = "Date",
ylab = "Number of Steps")
?barplot
ggplot2(aggregacti$steps, names.arg = aggregacti$date, breaks = 10, xlab = "Date",
ylab = "Number of Steps")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ggplot(aggregacti$steps, names.arg = aggregacti$date, breaks = 10, xlab = "Date",
ylab = "Number of Steps")
str(aggregacti)
aggregacti <- aggregate(steps ~ date, data = activity, FUN = sum)
ggplot(aggregacti$steps, names.arg = aggregacti$date, breaks = 10, xlab = "Date",
ylab = "Number of Steps")
ggplot(data=aggregacti$steps) + geom_histogram()
qplot(data=aggregacti$steps)
qplot(data=aggregacti, aes(aggregacti$steps)) + geom_histogram()
qplot(data=activity, aes(steps))
ggplot() + geom_histogram(data=actitivty,aes(date,steps),alpha=0.01,size=1)
ggplot() + geom_histogram(data=activity,aes(date,steps),alpha=0.01,size=1)
ggplot() + geom_histogram(data=activity,aes(date,steps),alpha=0.01,size=1, FUN=sum)
?geom_bar
ggplot() + geom_bar(data=activity,aes(date,steps),alpha=0.01,size=1, FUN=sum)
ggplot() + geom_bar(data=activity,aes(date,steps),stat = "bin", alpha=0.01,size=1, FUN=sum)
ggplot() + geom_bar(data=activity,aes(steps),stat = "bin", alpha=0.01,size=1, FUN=sum)
ggplot() + geom_histogram(data=activity,aes(steps),stat = "bin", alpha=0.01,size=1, FUN=sum)
ggplot() + geom_histogram(data=activity,aes(steps),stat = "bin", FUN=sum)
ggplot() + geom_histogram(data=activity,aes(date, steps),stat = "bin", FUN=sum)
ggplot() + geom_histogram(data=activity$date,aes(steps),stat = "bin", FUN=sum)
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue", fill = "steelblue")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity", colour = "steelblue")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity", colour = "blue")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity", colour = "blue", fill = "red")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity", FUN = sum,
colour = "blue", fill = "red")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity", FUN = sum,
colour = "blue", fill = "red")
qplot(activity, aes(date, steps)) + geom_bar(stat = "identity", FUN = sum,
colour = "blue", fill = "red")
barplot(aggregacti$steps, names.arg = aggregacti$date, breaks = 10, xlab = "Date",
ylab = "Number of Steps")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity", FUN = sum,
colour = "blue", fill = "red")
?ggplot
ggplot(activity, aes(steps)) + stat_bin(binwidth = 1, drop = FALSE, right = TRUE, col = "black")
ggplot(activity, aes(date,steps)) + stat_bin(binwidth = 1, drop = FALSE, right = TRUE, col = "black")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity", FUN = sum,
colour = "blue", fill = "red")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity", FUN = sum,
colour = "blue", fill = "red")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity",
colour = "blue", fill = "red")
?geom_bar
ggplot(activity, aes(date, steps)) + geom_bar(stat = "bin",
colour = "blue", fill = "red")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "stat",
colour = "blue", fill = "red")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "statistics",
colour = "blue", fill = "red")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity",
colour = "blue", fill = "red")
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity",
colour = "blue", fill = "red", na.action = na.omit)
ggplot(activity, aes(date, steps)) + geom_bar(stat = "identity",
colour = "blue", fill = "red", na.omit = T)
ggplot(activity, aes(x=date, y=steps)) + geom_bar(stat = "identity",
colour = "blue", fill = "red", na.omit = T)
?barplot
barplot(aggregacti$steps, names.arg = aggregacti$date,
xlab = "Date", ylab = "Number of Steps",
legend.text="Total Steps per Day")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = blue
xlab = "Date", ylab = "Number of Steps",
legend.text="Total Steps per Day")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = blue,
xlab = "Date", ylab = "Number of Steps",
legend.text="Total Steps per Day")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "blue",
xlab = "Date", ylab = "Number of Steps",
legend.text="Total Steps per Day")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "blue",
xlab = "Date", ylab = "Number of Steps",
main="Total Steps per Day")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "blue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day")
abline(lm(steps ~ date), col = "red")
abline(lm(aggregacti$steps ~ aggregacti$date), col = "red")
aggregacti <- aggregate(steps ~ date, data = activity, FUN = sum)
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day")
abline(lm(aggregacti$steps ~ aggregacti$date), col = "red")
lines(lm(aggregacti$steps ~ aggregacti$date), col = "red")
lines(aggregacti, col = "red")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day") +
lines(aggregacti, col = "red")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day") +
lines(aggregacti$steps, col = "red")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day") +
lines(aggregacti$date, col = "red")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day") +
lines(aggregacti$steps, col = "red")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day") +
lines(lm(aggregacti$steps ~ aggregacti$date, col = "red")
)
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day") +
lines(lm(aggregacti$steps ~ aggregacti$date))
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day") +
abline(lm(aggregacti$steps ~ aggregacti$date))
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day") +
lines(x=aggregacti$steps, y=aggregacti$date))
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day") +
lines(x=aggregacti$steps, y=aggregacti$date)
lines(x=aggregacti$steps, y=aggregacti$date)
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total Numbers of Steps/Day")
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total numbers of steps taken per day")
* 2. Calculate and report the mean and median total number of steps taken per day
aggreg_step_interv <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(aggreg_step_interv, type="l", col = "blue")
plot(aggreg_step_interv, type="l", col = "darkblue")
setwd("~/GitHub/RepData_PeerAssessment1")
unzip("activity.zip")
activity <- read.csv("activity.csv")
str(activity)
activity$date <- as.Date(activity$date)
aggregacti <- aggregate(steps ~ date, data = activity, FUN = sum)
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total numbers of steps taken per day")
?merge
na <- is.na(activity$steps)
na
if (is.na(activity$steps) == FALSE)
{activity$steps2 == mean(activity$steps)}
else activity$steps2 == activity$steps
for (i in nrow(activity)){
if (is.na(activity$steps[i]) == FALSE)
{activity$steps2[i] == mean(activity$steps)}
else activity$steps2[i] == activity$steps[i]
}
View(activity)
for (i in nrow(activity)){
if (activity$steps[i] == NA)
{activity$steps2[i] == mean(activity$steps)}
else activity$steps2[i] == activity$steps[i]
}
is.na(activity$steps[1]) == NA
is.na(activity$steps[1])
for (i in nrow(activity)){
if (is.na(activity$steps[i]) == FALSE)
activity$steps2[i] == mean(activity$steps)}
else {activity$steps2[i] == activity$steps[i]}}
for (i in nrow(activity)){
if (is.na(activity$steps[i]) == FALSE)
activity$steps2[i] == mean(activity$steps)}
else {activity$steps2[i] == activity$steps[i]}
nrow(activity)
for (i in nrow(activity))
{    if (is.na(activity$steps[i]) == FALSE)
{activity$steps2[i] == mean(activity$steps)}
else {activity$steps2[i] == activity$steps[i]}
}
View(activity)
activity$steps2[1] == mean(activity$steps)
for (i in nrow(activity))
{    if (is.na(activity$steps[i]) == FALSE)
{activity$steps2[i] <- mean(activity$steps)}
else {activity$steps2[i] <- activity$steps[i]}
}
View(activity)
activity$steps2[15] <- activity$steps[15]
View(activity)
activity$steps2[293] <- activity$steps[293]
View(activity)
mean(activity$steps)
?mean
mean(activity$steps, na.rm = TRUE)
for (i in nrow(activity))
{    if (is.na(activity$steps[i]) == FALSE)
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
View(activity)
for (i in nrow(activity))
{    if (activity$steps[i] == NA)
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
for (i in nrow(activity))
{    if (activity$steps[i] == "NA")
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
activity$steps2[2]
activity$steps[2]
for (i in nrow(activity))
{    if (activity$steps[i] == TRUE)
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
is.na(activity$steps[1])
for (i in nrow(activity))
{    if (is.na(activity$steps[i]) == "TRUE")
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
View(activity)
if (is.na(activity$steps[i]) == "TRUE")
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
for (i in nrow(activity))
{    if (is.na(activity$steps[i]) == "TRUE")
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
View(activity)
na[234]
is.na(activity$steps)[3456] == FALSE
is.na(activity$steps)[3456] == "FALSE"
activity$steps[13456] == FALSE
activity$steps[1] == FALSE
is.na(activity$steps[1]) == FALSE
is.na(activity$steps[3456]) == FALSE
is.na(activity$steps[1]) == TRUE
is.na(activity$steps[1])
is.na(activity$steps[1]) == FALSE
is.na(activity$steps) == FALSE
is.na(activity$steps[2]) == FALSE
is.na(activity$steps[2]) == TRUE
for (i in nrow(activity))
{    if (is.na(activity$steps[i]) == TRUE)
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
View(activity)
for (i:nrow(activity))
{    if (is.na(activity$steps[i]) == TRUE)
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
activity$steps2[1] <- mean(activity$steps, na.rm = TRUE)
View(activity)
for (i in 1:nrow(activity))
{    if (is.na(activity$steps[i]) == TRUE)
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
View(activity)
aggreg2 <- aggregate(steps2 ~ date, data = activity, FUN = sum)
barplot(aggreg2$steps, names.arg = aggreg2$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total numbers of steps taken per day")
barplot(aggreg2$steps, names.arg = aggreg2$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total numbers of steps(with missing data filled in) taken per day")
mean(activity$steps2)
View(activity)
mean(activity$steps)
mean(activity$steps2, na.rm = T)
mean(activity$steps, na.rm = T)
mean(aggreg2$steps2)
median(aggreg2$steps2)
mean(activity$steps2)
median(activity$steps2)
median(activity$steps)
median(activity$steps2, na.rm = T)
nrow(is.na(vip_dino)[1,])
nrow(is.na(vip_dino))
nrow(is.na(vip_dino)[, 2])
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(date)[i]) %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
View(activity)
for (i in 1:nrow(activity))
{    if (weekdays(as.date(date)[i]) %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(date, "%A %b %d %Y")[i]) %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
activity$date <- as.Date(activity$date)
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date)[i]) %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
View(activity)
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date, "%A")[i]) %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
View(activity)
weekdays(activity$date)[12345]
weekdays(activity$date)[12]
weekdays(activity$date)[17655]
weekdays(activity$date)[175]
weekdays(activity$date)[175]
4
weekdays(activity$date)[1234]
weekdays(activity$date)[1235]
weekdays(activity$date)[1000]
weekdays(activity$date)[2000]
weekdays(activity$date)[3000]
weekdays(activity$date)[3300]
weekdays(activity$date)[3303]
weekdays(activity$date)[3233]
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date)[i]) %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
weekdays(activity$date)[3303]
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date)[i]) %in% c("Sábado", "Domingo"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
View(activity)
tail(activity)
str(activity)
for (i in 1:nrow(activity))
{    if (weekdays(activity$date)[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
View(activity)
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
par(mfrow = c(2, 1))
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps ~ interval, data = activity, subset = activity$daytype ==
type, FUN = mean)
plot(steps.type, type = "l", main = type)
}
par(mfrow = c(2, 1))
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps2 ~ interval, data = activity, subset = activity$daytype ==
type, FUN = mean)
plot(steps.type, type = "l", main = type)
}
par(mfrow = c(2, 1))
for (type in c("weekend", "weekday")) {
steps.type <- aggregate(steps2 ~ interval, data = activity, subset = activity$daytype ==
type, FUN = mean)
plot(steps.type, type = "l", main = type)
}
daytype <- vector()
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] %in% c("Saturday", "Sunday"))
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] == "Saturday")
{activity$daytype[i] <- "weekend"}
else if (weekdays(as.Date(activity$date))[i] == "Sunday")
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
unzip("activity.zip")
activity <- read.csv("activity.csv")
str(activity)
activity$date <- as.Date(activity$date)
aggregacti <- aggregate(steps ~ date, data = activity, FUN = sum)
barplot(aggregacti$steps, names.arg = aggregacti$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total numbers of steps taken per day")
aggreg_steps_interval <- aggregate(steps ~ interval, data = activity, FUN = mean)
plot(aggreg_steps_interval, type="l", col = "darkblue")
aggreg_steps_interval$interval[which.max(aggreg_steps_interval$steps)]
for (i in 1:nrow(activity))
{    if (is.na(activity$steps[i]) == TRUE)
{activity$steps2[i] <- mean(activity$steps, na.rm = TRUE)}
else {activity$steps2[i] <- activity$steps[i]}
}
aggreg2 <- aggregate(steps2 ~ date, data = activity, FUN = sum)
barplot(aggreg2$steps, names.arg = aggreg2$date, col = "lightblue",
xlab = "Date", ylab = "Number of Steps",
main="Total numbers of steps(with missing data filled in) taken per day")
View(activity)
for (i in 1:nrow(activity))
{    if (weekdays(as.Date(activity$date))[i] == "Saturday")
{activity$daytype[i] <- "weekend"}
else if (weekdays(as.Date(activity$date))[i] == "Sunday")
{activity$daytype[i] <- "weekend"}
else {activity$daytype[i] <- "weekday"}
}
